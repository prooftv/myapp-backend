{"version":3,"sources":["../src/Truncate.js"],"names":["propTypes","element","PropTypes","string","maxWidth","number","maxChars","children","isRequired","defaultProps","ellipsis","truncateWord","str","replace","Truncate","Element","style","otherProps","nodeRef","truncatedChildren","setTruncatedChildren","node","current","innerText","scrollWidth","newChildren","length","ownStyle","overflow"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\n\nconst propTypes = {\n    element: PropTypes.string,\n    maxWidth: PropTypes.number,\n    maxChars: PropTypes.number,\n    children: PropTypes.string.isRequired,\n};\n\nconst defaultProps = {\n    element: 'div',\n};\n\nconst ellipsis = '\\u00A0â€¦';\n\nfunction truncateWord(str) {\n    return str.replace(/\\s+\\S+\\s*$/, '');\n}\n\nfunction Truncate({\n    element: Element,\n    maxWidth,\n    maxChars,\n    children,\n    style,\n    ...otherProps\n}) {\n    const nodeRef = useRef(null);\n    const [truncatedChildren, setTruncatedChildren] = useState(children);\n\n    // Truncate width\n    useLayoutEffect(() => {\n        if (!maxWidth) return;\n\n        /** @type HTMLElement */\n        const node = nodeRef.current;\n        node.innerText = children;\n\n        if (node.scrollWidth > maxWidth) {\n            node.innerText = children + ellipsis;\n\n            let newChildren = children;\n            while (\n                node.scrollWidth > maxWidth &&\n                newChildren !== truncateWord(newChildren)\n            ) {\n                newChildren = truncateWord(newChildren);\n                node.innerText = newChildren + ellipsis;\n            }\n\n            setTruncatedChildren(newChildren + ellipsis);\n        } else {\n            setTruncatedChildren(children);\n        }\n    }, [maxWidth, children]);\n\n    // Truncate chars\n    useEffect(() => {\n        if (!maxChars) return;\n\n        if (children.length > maxChars) {\n            let newChildren = children;\n            while (\n                (newChildren + ellipsis).length > maxChars &&\n                newChildren !== truncateWord(newChildren)\n            ) {\n                newChildren = truncateWord(newChildren);\n            }\n\n            setTruncatedChildren(newChildren + ellipsis);\n        } else {\n            setTruncatedChildren(children);\n        }\n    }, [maxChars, children]);\n\n    // Set required styles\n    let ownStyle = {};\n    if (maxWidth) {\n        ownStyle = {\n            ...ownStyle,\n            maxWidth,\n            overflow: 'hidden',\n        };\n    }\n\n    return (\n        <Element\n            ref={nodeRef}\n            style={{\n                ...ownStyle,\n                ...style,\n            }}\n            {...otherProps}\n        >\n            {truncatedChildren}\n        </Element>\n    );\n}\n\nTruncate.propTypes = propTypes;\nTruncate.defaultProps = defaultProps;\n\nexport default Truncate;\n"],"file":"Truncate.js"}