"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _excluded = ["element", "maxWidth", "maxChars", "children", "style"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  element: PropTypes.string,
  maxWidth: PropTypes.number,
  maxChars: PropTypes.number,
  children: PropTypes.string.isRequired
};
var defaultProps = {
  element: 'div'
};
var ellipsis = "\xA0\u2026";

function truncateWord(str) {
  return str.replace(/\s+\S+\s*$/, '');
}

function Truncate(_ref) {
  var Element = _ref.element,
      maxWidth = _ref.maxWidth,
      maxChars = _ref.maxChars,
      children = _ref.children,
      style = _ref.style,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var nodeRef = (0, React.useRef)(null);

  var _useState = (0, React.useState)(children),
      _useState2 = _slicedToArray(_useState, 2),
      truncatedChildren = _useState2[0],
      setTruncatedChildren = _useState2[1]; // Truncate width


  (0, React.useLayoutEffect)(function () {
    if (!maxWidth) return;
    /** @type HTMLElement */

    var node = nodeRef.current;
    node.innerText = children;

    if (node.scrollWidth > maxWidth) {
      node.innerText = children + ellipsis;
      var newChildren = children;

      while (node.scrollWidth > maxWidth && newChildren !== truncateWord(newChildren)) {
        newChildren = truncateWord(newChildren);
        node.innerText = newChildren + ellipsis;
      }

      setTruncatedChildren(newChildren + ellipsis);
    } else {
      setTruncatedChildren(children);
    }
  }, [maxWidth, children]); // Truncate chars

  (0, React.useEffect)(function () {
    if (!maxChars) return;

    if (children.length > maxChars) {
      var newChildren = children;

      while ((newChildren + ellipsis).length > maxChars && newChildren !== truncateWord(newChildren)) {
        newChildren = truncateWord(newChildren);
      }

      setTruncatedChildren(newChildren + ellipsis);
    } else {
      setTruncatedChildren(children);
    }
  }, [maxChars, children]); // Set required styles

  var ownStyle = {};

  if (maxWidth) {
    ownStyle = _objectSpread(_objectSpread({}, ownStyle), {}, {
      maxWidth: maxWidth,
      overflow: 'hidden'
    });
  }

  return /*#__PURE__*/React.createElement(Element, _extends({
    ref: nodeRef,
    style: _objectSpread(_objectSpread({}, ownStyle), style)
  }, otherProps), truncatedChildren);
}

Truncate.propTypes = propTypes;
Truncate.defaultProps = defaultProps;
var _default = Truncate;
exports["default"] = _default;
//# sourceMappingURL=Truncate.js.map